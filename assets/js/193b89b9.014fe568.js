"use strict";(self.webpackChunkjohnathan_sewell=self.webpackChunkjohnathan_sewell||[]).push([[551],{9613:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},k=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),k=a,m=p["".concat(s,".").concat(k)]||p[k]||u[k]||i;return n?o.createElement(m,r(r({ref:t},d),{},{components:n})):o.createElement(m,r({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}k.displayName="MDXCreateElement"},5599:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=n(2564),a=(n(9496),n(9613));const i={slug:"static-site-deployment-with-cdk",title:"Simple Static Site Deployment to AWS with CDK",authors:"johnathan",tags:["docusaurus"]},r=void 0,l={permalink:"/static-site-deployment-with-cdk",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-08-04-static-site-deployment-with-cdk.md",source:"@site/blog/2023-08-04-static-site-deployment-with-cdk.md",title:"Simple Static Site Deployment to AWS with CDK",description:"What is CDK?",date:"2023-08-04T00:00:00.000Z",formattedDate:"August 4, 2023",tags:[{label:"docusaurus",permalink:"/tags/docusaurus"}],readingTime:3.235,hasTruncateMarker:!1,authors:[{name:"Johnathan Sewell",title:"Software Engineer",url:"https://github.com/johnathan-sewell",imageURL:"https://avatars.githubusercontent.com/u/286782?v=4",key:"johnathan"}],frontMatter:{slug:"static-site-deployment-with-cdk",title:"Simple Static Site Deployment to AWS with CDK",authors:"johnathan",tags:["docusaurus"]},nextItem:{title:"Module Federation",permalink:"/module-federation"}},s={authorsImageUrls:[void 0]},c=[{value:"What is CDK?",id:"what-is-cdk",level:2},{value:"What will we be deploying?",id:"what-will-we-be-deploying",level:2},{value:"Install the CDK CLI:",id:"install-the-cdk-cli",level:2},{value:"Initialise CDK in your project",id:"initialise-cdk-in-your-project",level:2},{value:"Add your account details",id:"add-your-account-details",level:2},{value:"Add an S3 Bucket to the Stack",id:"add-an-s3-bucket-to-the-stack",level:2},{value:"Synthesising the CDK app",id:"synthesising-the-cdk-app",level:2},{value:"Bootstrapping",id:"bootstrapping",level:2},{value:"Deploying",id:"deploying",level:2},{value:"Deploy the built application files",id:"deploy-the-built-application-files",level:2},{value:"Add a CloudFront Distribution",id:"add-a-cloudfront-distribution",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"what-is-cdk"},"What is CDK?"),(0,a.kt)("p",null,"CDK is a tool for deploying infrastructure to AWS. It allows you to write code that will be translated into CloudFormation templates and used to deploy your infrastructure."),(0,a.kt)("h2",{id:"what-will-we-be-deploying"},"What will we be deploying?"),(0,a.kt)("p",null,"A static React application (Video Player code shared via Module Federation). It will be deployed to S3 and served via CloudFront."),(0,a.kt)("h2",{id:"install-the-cdk-cli"},"Install the CDK CLI:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm install -g aws-cdk\n")),(0,a.kt)("p",null,"If successful then running ",(0,a.kt)("inlineCode",{parentName:"p"},"cdk --version")," will return a version number."),(0,a.kt)("h2",{id:"initialise-cdk-in-your-project"},"Initialise CDK in your project"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"cdk init")," command, to create a CDK project. This needs to be run in an empty directory."),(0,a.kt)("p",null,"Create a subdirectory in your project to keep CDK code separate from application code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir cdk && cd cdk\ncdk init app --language typescript\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"lib/cdk-stack.ts")," is where your CDK application\u2019s main stack is defined. This is the file we\u2019ll be spending most of our time in."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"bin/cdk.ts")," is the entrypoint of the CDK application. It will load the stack defined in lib/cdk-stack.ts."),(0,a.kt)("h2",{id:"add-your-account-details"},"Add your account details"),(0,a.kt)("p",null,"Update bin/cdk.ts with your account details."),(0,a.kt)("p",null,"Add your account ID and region to the stack name, tags are optional:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'#!/usr/bin/env node\nimport "source-map-support/register";\nimport * as cdk from "aws-cdk-lib";\nimport { CdkStack } from "../lib/cdk-stack";\n\nconst environment = process.env.ENVIRONMENT || "development";\n\nconst shortEnvironment =\n  process.env.ENVIRONMENT === "production" ? "prod" : "dev";\n\nconst app = new cdk.App();\nconst stackName = `video-player-module-${shortEnvironment}`;\n\nnew CdkStack(app, "CdkStack", {\n  stackName,\n  description: "Video Player Module Stack",\n  env: {\n    account: "your-account-id",\n    region: "eu-central-1",\n  },\n  tags: {\n    context: "video-player",\n    service: "module",\n    environment,\n  },\n});\n')),(0,a.kt)("h2",{id:"add-an-s3-bucket-to-the-stack"},"Add an S3 Bucket to the Stack"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"lib/cdk-stack.ts")," add the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import * as cdk from "aws-cdk-lib";\nimport { Construct } from "constructs";\nimport * as s3 from "aws-cdk-lib/aws-s3";\n\nexport class CdkStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    // The code that defines your stack goes here\n    const originBucket = new s3.Bucket(this, "video-player-module-dev", {\n      bucketName: "video-player-module-dev",\n    });\n  }\n}\n')),(0,a.kt)("h2",{id:"synthesising-the-cdk-app"},"Synthesising the CDK app"),(0,a.kt)("p",null,"When CDK apps are executed, they produce (or \u201csynthesize\u201d) an AWS CloudFormation template for each stack defined in your application."),(0,a.kt)("p",null,"To synthesize a CDK app, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"cdk synth")," command to create a CloudFormation template in the ",(0,a.kt)("inlineCode",{parentName:"p"},"cdk.out")," directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cdk synth\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cdk deploy")," actually synthesises the app before deploying, so you don't need to run ",(0,a.kt)("inlineCode",{parentName:"p"},"synth")," before deploying, but it can be useful ."),(0,a.kt)("h2",{id:"bootstrapping"},"Bootstrapping"),(0,a.kt)("p",null,"Bootstrapping is the process of provisioning resources for CDK itself, including an Amazon S3 bucket for storing files and IAM roles that grant permissions needed to perform deployments."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"This only needs to be done once for your account and region.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cdk bootstrap\n")),(0,a.kt)("h2",{id:"deploying"},"Deploying"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cdk deploy\n")),(0,a.kt)("p",null,"After deployment, you should see the new Stack in the ",(0,a.kt)("a",{parentName:"p",href:"https://console.aws.amazon.com/cloudformation/home"},"AWS CloudFormation console"),". And the new Bucket in the ",(0,a.kt)("a",{parentName:"p",href:"https://s3.console.aws.amazon.com/s3/home"},"AWS S3 console"),"."),(0,a.kt)("h2",{id:"deploy-the-built-application-files"},"Deploy the built application files"),(0,a.kt)("p",null,"Now that we have a bucket to deploy to, we can deploy our application files."),(0,a.kt)("p",null,"The application build output is in the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist")," directory in the root of the project. We copy the contents of this directory to the S3 bucket by adding an S3 Bucket Deployment to the stack:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'new s3Deployment.BucketDeployment(this, "video-player-module-s3-deployment", {\n  sources: [s3Deployment.Source.asset("../dist")],\n  destinationBucket: originBucket,\n});\n')),(0,a.kt)("h2",{id:"add-a-cloudfront-distribution"},"Add a CloudFront Distribution"),(0,a.kt)("p",null,"We need to add a CloudFront distribution to serve the files from the S3 bucket."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const originBucket = new s3.Bucket(this, "video-player-module-dev", {\n  bucketName: "video-player-module-dev",\n});\n\nconst distribution = new cloudfront.Distribution(this, "Distribution", {\n  defaultBehaviour: { origin: new origins.S3Origin(originBucket) },\n});\n\nnew s3Deployment.BucketDeployment(this, "video-player-module-s3-deployment", {\n  sources: [s3Deployment.Source.asset("../dist")],\n  destinationBucket: originBucket,\n  distribution,\n  distributionPaths: ["/*"],\n});\n\nconst certificate = certificateManager.Certificate.fromCertificateArn(\n  this,\n  `certificate-lookup`,\n  "arn:aws:acm:us-east-1:your-id:certificate/id"\n);\n\nnew cloudfront.Distribution(this, "video-player-module-distribution", {\n  defaultBehaviour: {\n    origin: new cloudfrontOrigins.S3Origin(originBucket),\n  },\n  comment: "Video Player Module Distribution",\n  defaultRootObject: "index.html",\n  certificate,\n  domainNames: ["video.your-site.com"],\n});\n')),(0,a.kt)("p",null,"You should now be able to access your application at the domain you specified."))}u.isMDXComponent=!0}}]);