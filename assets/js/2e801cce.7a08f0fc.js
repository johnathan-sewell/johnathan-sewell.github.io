"use strict";(self.webpackChunkjohnathan_sewell=self.webpackChunkjohnathan_sewell||[]).push([[450],{6029:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"hls-quality-selector","metadata":{"permalink":"/hls-quality-selector","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-08-01-hls-quality-selector.md","source":"@site/blog/2023-08-01-hls-quality-selector.md","title":"Building a Quality Selector for HLS.js in React","description":"A React hook to get and set the quality of an HLS.js video","date":"2023-08-01T00:00:00.000Z","formattedDate":"August 1, 2023","tags":[{"label":"hls.js","permalink":"/tags/hls-js"},{"label":"react","permalink":"/tags/react"}],"readingTime":2.215,"hasTruncateMarker":false,"authors":[{"name":"Johnathan Sewell","title":"Software Engineer","url":"https://github.com/johnathan-sewell","imageURL":"https://avatars.githubusercontent.com/u/286782?v=4","key":"johnathan"}],"frontMatter":{"slug":"hls-quality-selector","title":"Building a Quality Selector for HLS.js in React","authors":"johnathan","tags":["hls.js","react"]}},"content":"### A React hook to get and set the quality of an HLS.js video\\n\\nTo get and set the video quality we need to listen to the hls.js events and also set the `currentLevel` property on the hls instance.\\n\\n```jsx\\nimport Hls, { LevelSwitchedData, ManifestParsedData } from \\"hls.js\\";\\nimport { useEffect, useMemo, useState } from \\"react\\";\\n\\nexport const AUTO = -1;\\n\\nexport interface Level {\\n  height: number;\\n  index: number;\\n}\\n\\nexport const useHlsQualityLevels = ({ hls }: { hls: Hls | null }) => {\\n  const [levels, setLevels] = useState<Level[]>();\\n  const [currentLevelIndex, setCurrentLevelIndex] = useState<number>(AUTO);\\n  const [isAutoLevelEnabled, setIsAutoLevelEnabled] = useState<boolean>(true);\\n\\n  useEffect(() => {\\n    if (!hls) return;\\n\\n    function onLevelSwitched(eventName: string, data: LevelSwitchedData) {\\n      setCurrentLevelIndex(data.level);\\n    }\\n\\n    function onManifestParsed(eventName: string, data: ManifestParsedData) {\\n      const mappedLevels = data.levels.map((level, index) => ({\\n        height: level.height,\\n        index,\\n      }));\\n      const sortedLevels = mappedLevels.sort((a, b) => b.height - a.height);\\n      setLevels(sortedLevels);\\n    }\\n\\n    hls.on(Hls.Events.LEVEL_SWITCHED, onLevelSwitched);\\n    hls.on(Hls.Events.MANIFEST_PARSED, onManifestParsed);\\n\\n    return () => {\\n      hls.off(Hls.Events.LEVEL_SWITCHED, onLevelSwitched);\\n      hls.off(Hls.Events.MANIFEST_PARSED, onManifestParsed);\\n    };\\n  }, [hls]);\\n\\n  const handleQualityChange = useMemo(() => {\\n    return hls !== null\\n      ? (level: number) => {\\n          setIsAutoLevelEnabled(level === AUTO);\\n          hls.currentLevel = level;\\n        }\\n      : () => undefined;\\n  }, [hls]);\\n\\n  return {\\n    levels,\\n    isAutoLevelEnabled,\\n    currentLevelIndex,\\n    handleQualityChange,\\n  };\\n};\\n```\\n\\nAnd I use this to pass level information to a React component like this:\\n\\n```jsx\\nconst {\\n  levels = [],\\n  currentLevelIndex,\\n  isAutoLevelEnabled,\\n  handleQualityChange,\\n} = useHlsQualityLevels({ hls });\\n\\nreturn (\\n  <QualityLevelsButton\\n    levels={levels}\\n    currentLevelIndex={currentLevelIndex}\\n    isAutoLevelEnabled={isAutoLevelEnabled}\\n    onQualityChanged={handleQualityChange}\\n  />\\n);\\n```\\n\\n### Building the UI\\n\\nCreate a popup menu with a button that shows the current quality level and a list of quality levels to choose from. I\'m using [Headless UI](https://headlessui.com/react/popover) for this.\\n\\n```jsx\\n<Popover>\\n  <Popover.Button>\\n    {levels.find((level) => level.index === currentLevelIndex)?.height ??\\n      \\"Auto\\"}\\n  </Popover.Button>\\n  <Popover.Panel>\\n    {levels.map((level) => (\\n      <Popover.Button\\n        key={level.index}\\n        onClick={() => onQualityChanged(level.index)}\\n      >\\n        {level.height}\\n      </Popover.Button>\\n    ))}\\n    <Popover.Button onClick={() => onQualityChanged(-1)}>Auto</Popover.Button>\\n  </Popover.Panel>\\n</Popover>\\n```\\n\\nThis results in a functional but not pretty UI:\\n\\n![Headless UI](/img/hls-quality-selector/headlessui.png)\\n\\n#### Positioning the popup with Popper.js\\n\\n```jsx\\nconst [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>();\\nconst [popperElement, setPopperElement] = useState<HTMLDivElement | null>();\\nconst { styles, attributes } = usePopper(referenceElement, popperElement, {\\n  placement: \\"top\\",\\n  modifiers: [\\n    {\\n      name: \\"offset\\",\\n      options: {\\n        offset: [0, 10],\\n      },\\n    },\\n  ],\\n});\\n\\nreturn (\\n  <Popover className=\\"relative\\">\\n    <Popover.Button ref={setReferenceElement}>\\n      {levels.find((level) => level.index === currentLevelIndex)?.height ?? \\"Auto\\"}\\n    </Popover.Button>\\n    <Popover.Panel ref={setPopperElement} style={styles.popper} {...attributes.popper}>\\n      {levels.map((level) => (\\n        <Popover.Button key={level.index} onClick={() => onQualityChanged(level.index)}>\\n          {level.height}\\n        </Popover.Button>\\n      ))}\\n      <Popover.Button onClick={() => onQualityChanged(-1)}>Auto</Popover.Button>\\n    </Popover.Panel>\\n  </Popover>\\n);\\n```\\n\\nThe popup is now positioned correctly:\\n\\n![Popper JS](/img/hls-quality-selector/popper.png)\\n\\n#### Add some styling with Tailwind CSS\\n\\n![Styled Popup](/img/hls-quality-selector/styled.png)\\n\\n#### Finally add a transition\\n\\nUsing the [Transition element from Headless UI](https://headlessui.com/react/transition)\\n\\n```jsx\\nimport { Transition } from \\"@headlessui/react\\";\\n\\n<Transition\\n  as={Fragment}\\n  enter=\\"transition-opacity ease-out duration-500\\"\\n  enterFrom=\\"opacity-0\\"\\n  enterTo=\\"opacity-100\\"\\n  leave=\\"transition-opacity ease-in duration-200\\"\\n  leaveFrom=\\"opacity-100\\"\\n  leaveTo=\\"opacity-0\\"\\n>\\n  <Popover.Panel>/* ... */</Popover.Panel>\\n</Transition>;\\n```"}]}')}}]);