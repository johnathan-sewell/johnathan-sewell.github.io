"use strict";(self.webpackChunkjohnathan_sewell=self.webpackChunkjohnathan_sewell||[]).push([[734],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var o=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?o.createElement(k,i(i({ref:t},p),{},{components:n})):o.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7824:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7605),a=(n(9496),n(9613));const r={slug:"static-site-deployment-with-cdk",title:"Simple Static Site Deployment to AWS with CDK",authors:"johnathan",tags:["cdk aws"]},i=void 0,l={permalink:"/static-site-deployment-with-cdk",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-08-04-static-site-deployment-with-cdk.md",source:"@site/blog/2023-08-04-static-site-deployment-with-cdk.md",title:"Simple Static Site Deployment to AWS with CDK",description:"What is CDK?",date:"2023-08-04T00:00:00.000Z",formattedDate:"August 4, 2023",tags:[{label:"cdk aws",permalink:"/tags/cdk-aws"}],readingTime:4.58,hasTruncateMarker:!1,authors:[{name:"Johnathan Sewell",title:"Software Engineer",url:"https://github.com/johnathan-sewell",imageURL:"https://avatars.githubusercontent.com/u/286782?v=4",key:"johnathan"}],frontMatter:{slug:"static-site-deployment-with-cdk",title:"Simple Static Site Deployment to AWS with CDK",authors:"johnathan",tags:["cdk aws"]},prevItem:{title:"Vite Project Setup",permalink:"/vite-project-setup"},nextItem:{title:"Module Federation",permalink:"/module-federation"}},s={authorsImageUrls:[void 0]},c=[{value:"What is CDK?",id:"what-is-cdk",level:2},{value:"What will we be deploying?",id:"what-will-we-be-deploying",level:2},{value:"Install the CDK CLI:",id:"install-the-cdk-cli",level:2},{value:"Initialise CDK in your project",id:"initialise-cdk-in-your-project",level:2},{value:"Add your account details",id:"add-your-account-details",level:2},{value:"Add an S3 Bucket to the Stack",id:"add-an-s3-bucket-to-the-stack",level:2},{value:"Synthesising the CDK app",id:"synthesising-the-cdk-app",level:2},{value:"Bootstrapping",id:"bootstrapping",level:2},{value:"Deploying",id:"deploying",level:2},{value:"Add a CloudFront Distribution",id:"add-a-cloudfront-distribution",level:2},{value:"Deploy the built application files",id:"deploy-the-built-application-files",level:2},{value:"To clean up and remove the stacks",id:"to-clean-up-and-remove-the-stacks",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"what-is-cdk"},"What is CDK?"),(0,a.kt)("p",null,"CDK is a tool for deploying infrastructure to AWS. It allows you to write code that will be translated into CloudFormation templates and used to deploy your infrastructure."),(0,a.kt)("h2",{id:"what-will-we-be-deploying"},"What will we be deploying?"),(0,a.kt)("p",null,"A static React application, deployed to S3 and served via CloudFront."),(0,a.kt)("h2",{id:"install-the-cdk-cli"},"Install the CDK CLI:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm install -g aws-cdk\n")),(0,a.kt)("p",null,"If successful then running ",(0,a.kt)("inlineCode",{parentName:"p"},"cdk --version")," will return a version number."),(0,a.kt)("h2",{id:"initialise-cdk-in-your-project"},"Initialise CDK in your project"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"cdk init")," command, to create a CDK project. ",(0,a.kt)("strong",{parentName:"p"},"This needs to be run in an empty directory.")),(0,a.kt)("p",null,"Create a subdirectory in your project to keep CDK code separate from application code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir cdk && cd cdk\ncdk init app --language typescript\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"lib/cdk-stack.ts")," is where your CDK application\u2019s main stack is defined. This is the file we\u2019ll be spending most of our time in."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"bin/cdk.ts")," is the entrypoint of the CDK application. It will load the stack defined in lib/cdk-stack.ts."),(0,a.kt)("h2",{id:"add-your-account-details"},"Add your account details"),(0,a.kt)("p",null,"Create a config file that can read environment variables set during deployment (a Github Workflow) or from a local .env file in cdk/config.ts."),(0,a.kt)("p",null,"You need to install ",(0,a.kt)("inlineCode",{parentName:"p"},"zod")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"dotenv"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pnpm i zod")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pnpm i -D dotenv")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Expand Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { z } from "zod";\nrequire("dotenv").config({ path: `.env.local`, override: true });\n\nconst envVarsSchema = z.object({\n  AWS_ACCOUNT: z.string().default("YOUR ACCOUNT ID"),\n  AWS_REGION: z.string().default("eu-central-1"),\n  ENVIRONMENT: z.enum(["local", "development", "production"]),\n});\n\nexport type ApiEnvironment = z.input<typeof envVarsSchema>;\n\nconst envVars = envVarsSchema.safeParse(process.env);\nif (!envVars.success) {\n  // eslint-disable-next-line no-console\n  console.error("There is an error with your environment variables.");\n  throw envVars.error;\n}\n\nexport const config = {\n  environment: envVars.data.ENVIRONMENT,\n  project: {\n    context: "website" as const,\n    name: "frontend" as const,\n  },\n  shortEnvironment:\n    envVars.data.ENVIRONMENT === "production"\n      ? ("prod" as const)\n      : ("dev" as const),\n  aws: {\n    account: envVars.data.AWS_ACCOUNT,\n    region: envVars.data.AWS_REGION,\n  },\n};\n'))),(0,a.kt)("p",null,"Update bin/cdk.ts with your account details."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Expand Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'#!/usr/bin/env node\nimport "source-map-support/register";\nimport * as cdk from "aws-cdk-lib";\nimport { CdkStack } from "../lib/cdk-stack";\nimport { config } from "../config";\n\nconst app = new cdk.App();\nconst projectName = `${config.project.context}-${config.project.name}`;\nconst stackName = `${projectName}-${config.shortEnvironment}`;\n\nnew CdkStack(app, stackName, {\n  stackName,\n  tags: {\n    context: config.project.context,\n    service: config.project.name,\n    environment: config.environment,\n  },\n  env: {\n    account: config.aws.account,\n    region: config.aws.region,\n  },\n});\n'))),(0,a.kt)("p",null,"Add local environment variables in ",(0,a.kt)("inlineCode",{parentName:"p"},"cdk/.env.local"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ENVIRONMENT=development\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"echo ENVIRONMENT=development > cdk/.env.local")),(0,a.kt)("h2",{id:"add-an-s3-bucket-to-the-stack"},"Add an S3 Bucket to the Stack"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"lib/cdk-stack.ts")," add the following code:"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Expand Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import * as cdk from "aws-cdk-lib";\nimport { Construct } from "constructs";\nimport * as s3 from "aws-cdk-lib/aws-s3";\nimport { config } from "../config";\n\nexport class CdkStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const projectName = `${config.project.context}-${config.project.name}`;\n\n    new s3.Bucket(this, `${projectName}-${config.shortEnvironment}`, {\n      bucketName: `${projectName}-${config.shortEnvironment}`,\n    });\n  }\n}\n'))),(0,a.kt)("h2",{id:"synthesising-the-cdk-app"},"Synthesising the CDK app"),(0,a.kt)("p",null,"When CDK apps are executed, they produce (or \u201csynthesize\u201d) an AWS CloudFormation template for each stack defined in your application."),(0,a.kt)("p",null,"To synthesize a CDK app, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"cdk synth")," command to create a CloudFormation template in the ",(0,a.kt)("inlineCode",{parentName:"p"},"cdk.out")," directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"( cd cdk && cdk synth )\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cdk deploy")," actually synthesises the app before deploying, so you don't need to run ",(0,a.kt)("inlineCode",{parentName:"p"},"synth")," before deploying, but it can be useful ."),(0,a.kt)("h2",{id:"bootstrapping"},"Bootstrapping"),(0,a.kt)("p",null,"Bootstrapping is the process of provisioning resources for CDK itself, including an Amazon S3 bucket for storing files and IAM roles that grant permissions needed to perform deployments."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"This only needs to be done once for your account and region.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"( cd cdk && cdk bootstrap )\n")),(0,a.kt)("h2",{id:"deploying"},"Deploying"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"( cd cdk && cdk deploy )\n")),(0,a.kt)("p",null,"After deployment, you should see the new Stack in the ",(0,a.kt)("a",{parentName:"p",href:"https://console.aws.amazon.com/cloudformation/home"},"AWS CloudFormation console"),". And the new Bucket in the ",(0,a.kt)("a",{parentName:"p",href:"https://s3.console.aws.amazon.com/s3/home"},"AWS S3 console"),"."),(0,a.kt)("p",null,"Add these to package.json:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n  "cdk:synth": "( cd cdk && cdk synth )",\n  "cdk:deploy": "( cd cdk && cdk deploy )",\n}\n')),(0,a.kt)("h2",{id:"add-a-cloudfront-distribution"},"Add a CloudFront Distribution"),(0,a.kt)("p",null,"We need to add a CloudFront distribution to serve the files from the S3 bucket."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const distribution = new cloudfront.Distribution(\n  this,\n  `${projectName}-${config.shortEnvironment}-distribution}`,\n  {\n    defaultBehavior: {\n      origin: new cloudfrontOrigins.S3Origin(originBucket),\n    },\n    comment: `${projectName}-${config.shortEnvironment}`,\n    defaultRootObject: "index.html",\n  }\n);\n')),(0,a.kt)("h2",{id:"deploy-the-built-application-files"},"Deploy the built application files"),(0,a.kt)("p",null,"Now that we have a bucket to deploy to, we can deploy our application files."),(0,a.kt)("p",null,"Assume we have application build output is in the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist")," directory in the root of the project. We copy the contents of this directory to the S3 bucket by adding an S3 Bucket Deployment to the stack:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'new s3Deployment.BucketDeployment(\n  this,\n  `${projectName}-${config.shortEnvironment}-s3-deployment`,\n  {\n    sources: [s3Deployment.Source.asset("../dist")],\n    destinationBucket: originBucket,\n    distribution,\n    distributionPaths: ["/*"], // invalidates the Cloudfront cache for all files\n  }\n);\n')),(0,a.kt)("p",null,"Once deployed you should have a Cloudfront distribution serving your website files."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"End Result",src:n(93).Z,width:"1360",height:"544"})),(0,a.kt)("p",null,"The complete stack code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import * as cdk from "aws-cdk-lib";\nimport { Construct } from "constructs";\nimport * as cloudfront from "aws-cdk-lib/aws-cloudfront";\nimport * as cloudfrontOrigins from "aws-cdk-lib/aws-cloudfront-origins";\nimport * as s3Deployment from "aws-cdk-lib/aws-s3-deployment";\nimport * as s3 from "aws-cdk-lib/aws-s3";\nimport { config } from "../config";\n\nexport class CdkStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const projectName = `${config.project.context}-${config.project.name}`;\n\n    const originBucket = new s3.Bucket(\n      this,\n      `${projectName}-${config.shortEnvironment}`,\n      {\n        bucketName: `${projectName}-${config.shortEnvironment}`,\n      }\n    );\n\n    const distribution = new cloudfront.Distribution(\n      this,\n      `${projectName}-${config.shortEnvironment}-distribution}`,\n      {\n        defaultBehavior: {\n          origin: new cloudfrontOrigins.S3Origin(originBucket),\n        },\n        comment: `${projectName}-${config.shortEnvironment}`,\n        defaultRootObject: "index.html",\n      }\n    );\n\n    new s3Deployment.BucketDeployment(\n      this,\n      `${projectName}-${config.shortEnvironment}-s3-deployment`,\n      {\n        sources: [s3Deployment.Source.asset("../dist")],\n        destinationBucket: originBucket,\n        distribution,\n        distributionPaths: ["/*"], // invalidates the Cloudfront cache for all files\n      }\n    );\n  }\n}\n')),(0,a.kt)("h2",{id:"to-clean-up-and-remove-the-stacks"},"To clean up and remove the stacks"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"destroy")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cdk destroy\n")))}u.isMDXComponent=!0},93:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/end-result-9c54c033d4ea430b527244eeec4ed2a8.png"}}]);