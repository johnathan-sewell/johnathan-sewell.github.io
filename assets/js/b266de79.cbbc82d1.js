"use strict";(self.webpackChunkjohnathan_sewell=self.webpackChunkjohnathan_sewell||[]).push([[518],{4369:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"react-flow","metadata":{"permalink":"/react-flow","source":"@site/blog/2024-04-22-react-flow/index.md","title":"React Flow for Elimination Brackets","description":"Using React Flow to create a somewhat dynamic elimination bracket for a Dota 2 tournament. I need to layout the bracket to match some design very closely, so I need to be able to hard-code the positions of the nodes, but connect them automatically. I also need to animate the edges to highlight the winning path a team has taken.","date":"2024-04-22T00:00:00.000Z","tags":[],"readingTime":4.865,"hasTruncateMarker":true,"authors":[{"name":"Johnathan Sewell","url":"https://github.com/johnathan-sewell","imageURL":"https://avatars.githubusercontent.com/u/286782?v=4","key":"johnathan"}],"frontMatter":{"slug":"react-flow","title":"React Flow for Elimination Brackets","authors":"johnathan"},"unlisted":false,"nextItem":{"title":"Logging in the Frontend API layer","permalink":"/logging-frontend-api-layer"}},"content":"Using React Flow to create a somewhat dynamic elimination bracket for a Dota 2 tournament. I need to layout the bracket to match some design very closely, so I need to be able to hard-code the positions of the nodes, but connect them automatically. I also need to animate the edges to highlight the winning path a team has taken.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Starting off with 3 nodes and 2 edges\\n\\nHere I define a custom node type \\"match\\" that has a label and two handles, one on the left and one on the right.\\n\\n![3 nodes and 2 edges](3-nodes-2-edges.png)\\n\\n```ts\\nimport ReactFlow, { Handle, Position } from \\"reactflow\\";\\nimport \\"reactflow/dist/style.css\\";\\n\\nfunction MatchNode({ data }: { data: { label: string } }) {\\n  return (\\n    <>\\n      <Handle type=\\"target\\" position={Position.Left} id=\\"a\\" />\\n      <div className=\\"rounded border p-5\\">{data.label}</div>\\n      <Handle type=\\"source\\" position={Position.Right} id=\\"b\\" />\\n    </>\\n  );\\n}\\n\\nconst nodeTypes = { match: MatchNode };\\n\\nconst initialNodes = [\\n  { id: \\"1\\", type: \\"match\\", position: { x: 100, y: 100 }, data: { label: \\"Match 1\\" } },\\n  { id: \\"2\\", type: \\"match\\", position: { x: 100, y: 300 }, data: { label: \\"Match 2\\" } },\\n  { id: \\"3\\", type: \\"match\\", position: { x: 300, y: 200 }, data: { label: \\"Match 3\\" } },\\n];\\nconst initialEdges = [\\n  { id: \\"e1-3\\", source: \\"1\\", target: \\"3\\" },\\n  { id: \\"e2-3\\", source: \\"2\\", target: \\"3\\" },\\n];\\n\\nexport function FlowTest() {\\n  return (\\n    <div style={{ width: \\"100vw\\", height: \\"100vh\\" }}>\\n      <ReactFlow nodeTypes={nodeTypes} nodes={initialNodes} edges={initialEdges} />\\n    </div>\\n  );\\n}\\n\\n```\\n\\n## Custom Match component for nodes\\n\\nNext I add a custom match component that shows team logos, names, and scores. Positions are hard-coded for each match index, these will remain hard-coded so that the layout matches the bracket design exactly.\\n\\n![Custom match components and x,y coordinates](match-components.png)\\n\\n```ts\\nimport ReactFlow, { Handle, Position } from \\"reactflow\\";\\nimport { double_elim_8_finished } from \\"../DoubleElim8/mockData\\";\\nimport \\"reactflow/dist/style.css\\";\\nimport { Match } from \\"./Match\\";\\nimport { BracketSeries } from \\"@data/tournament/shared/types/bracket\\";\\n\\nconst matchIndexToPositions: { [key: number]: { node: { x: number; y: number } } } = {\\n  // upper bracket quarter final 1\\n  0: {\\n    node: {\\n      x: 0,\\n      y: 45,\\n    },\\n  },\\n  // upper bracket quarter final 2\\n  1: {\\n    node: {\\n      x: 0,\\n      y: 151,\\n    },\\n  },\\n  // upper bracket quarter final 3\\n  2: {\\n    node: {\\n      x: 0,\\n      y: 257,\\n    },\\n  },\\n  // upper bracket quarter final 4\\n  3: {\\n    node: {\\n      x: 0,\\n      y: 363,\\n    },\\n  },\\n  // lower bracket, round 1, match 1\\n  4: {\\n    node: {\\n      x: 0,\\n      y: 520,\\n    },\\n  },\\n  // lower bracket, round 1, match 2\\n  5: {\\n    node: {\\n      x: 0,\\n      y: 626,\\n    },\\n  },\\n  // upper bracket semi final 1\\n  6: {\\n    node: {\\n      x: 350,\\n      y: 97,\\n    },\\n  },\\n  // upper bracket semi final 2\\n  7: {\\n    node: {\\n      x: 350,\\n      y: 311,\\n    },\\n  },\\n  // lower bracket round 2, match 1\\n  8: {\\n    node: {\\n      x: 234,\\n      y: 520,\\n    },\\n  },\\n  // lower bracket round 2, match 2\\n  9: {\\n    node: {\\n      x: 234,\\n      y: 626,\\n    },\\n  },\\n  // lower bracket round 3\\n  10: {\\n    node: {\\n      x: 468,\\n      y: 573,\\n    },\\n  },\\n  // upper bracket final\\n  11: {\\n    node: {\\n      x: 702,\\n      y: 204,\\n    },\\n  },\\n  // lower bracket final\\n  12: {\\n    node: {\\n      x: 702,\\n      y: 573,\\n    },\\n  },\\n  // grand final\\n  13: {\\n    node: {\\n      x: 927,\\n      y: 420,\\n    },\\n  },\\n};\\n\\nfunction MatchNode({ data }: { data: BracketSeries }) {\\n  return (\\n    <>\\n      <Handle type=\\"target\\" position={Position.Left} id=\\"a\\" />\\n      {/* custom match component showing team logos, names, scores */}\\n      <Match match={data} />\\n      <Handle type=\\"source\\" position={Position.Right} id=\\"b\\" />\\n    </>\\n  );\\n}\\n\\nconst nodeTypes = { match: MatchNode };\\n\\nconst initialNodes = double_elim_8_finished?.matches?.map((match) => ({\\n  id: match.uuid,\\n  type: \\"match\\",\\n  position: matchIndexToPositions[match.index].node,\\n  data: match,\\n}));\\nconst initialEdges = [\\n];\\n\\nexport function FlowTest() {\\n  return (\\n    <div className=\\"relative w-full\\">\\n      <div className=\\"custom-scrollbar relative overflow-x-scroll\\">\\n        <div\\n          style={{\\n            width: \\"1075px\\",\\n            height: \\"720px\\",\\n          }}\\n        >\\n          <ReactFlow nodeTypes={nodeTypes} nodes={initialNodes} edges={initialEdges} />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\n```\\n\\n## Adding edges to connect the nodes\\n\\n```ts\\nconst edges = double_elim_8_finished?.matches\\n  ?.filter((match) => match.winnerGoesTo?.seriesUUID)\\n  .map((match) => ({\\n    id: `edge-${match.uuid}`,\\n    source: match.uuid,\\n    target: match.winnerGoesTo!.seriesUUID,\\n  }));\\n```\\n![Edges connecting the nodes](edges.png)\\n\\n\\n## Add corners to the edges\\n\\nAdd a `type: \\"smoothstep\\"` to the edge object to add corners to the edges. See [https://reactflow.dev/examples/edges/edge-types](React Flow Edge Types)\\n\\n\\n## Animating the winning path of a team\\n\\nWhen hovering on a team we want to show the how that team has moved through the bracket. We can do this by setting the active team id in the state and updating the edges to be animated if the team has won the match the edge is coming from. We also change the color of the edge to yellow if it is animated.\\n\\n```ts\\nconst [activeTeamId, setActiveTeamId] = useState<string>();\\n\\n  const nodes = useMemo(\\n    () =>\\n      matches?.map((match) => ({\\n        id: match.uuid,\\n        type: \\"match\\",\\n        position: matchIndexPositions[match.index].node,\\n        data: { match, activeTeamId, onTeamHover: setActiveTeamId },\\n      })),\\n    [matches, activeTeamId, matchIndexPositions],\\n  );\\n\\n  const edges = useMemo(\\n    () =>\\n      matches\\n        ?.filter((match) => match.winnerGoesTo?.seriesUUID) // filter out grand final (no next match so so edge needed)\\n        .map((match) => {\\n          const animated =\\n            activeTeamId === undefined\\n              ? false\\n              : match.teamA?.isEliminated\\n                ? match.teamB?.uuid === activeTeamId\\n                : match.teamA?.uuid === activeTeamId;\\n\\n          return {\\n            id: `edge-${match.uuid}`,\\n            type: \\"smoothstep\\",\\n            source: match.uuid,\\n            target: match.winnerGoesTo!.seriesUUID,\\n            animated,\\n            zIndex: animated ? 10 : 0,\\n            style: {\\n              stroke: activeTeamId ? (animated ? \\"#fffe3e\\" : \\"#8D858C\\") : \\"#D2CED1\\",\\n            },\\n          };\\n        }),\\n    [matches, activeTeamId],\\n  );\\n```\\n\\n![Animated edges](animate.png)\\n\\n\\n## Configuring additional behaviours\\n\\nReact Flow comes with a lot of built-in behaviours that can be configured. For example, we can disable the ability to zoom in and out, pan on drag, select elements, and prevent scrolling.\\n\\n```ts\\n<ReactFlow\\n  nodeTypes={nodeTypes}\\n  nodes={nodes}\\n  edges={edges}\\n  // prevent selecting nodes\\n  elementsSelectable={false}\\n  // prevent zooming\\n  zoomOnScroll={false}\\n  zoomOnDoubleClick={false}\\n  zoomOnPinch={false}\\n  // prevent panning & scrolling\\n  panOnDrag={false}\\n  preventScrolling={false}\\n  proOptions={{\\n    hideAttribution: true,\\n  }}\\n/>\\n```"},{"id":"logging-frontend-api-layer","metadata":{"permalink":"/logging-frontend-api-layer","source":"@site/blog/2024-03-06-logging-frontend-api-layer/index.md","title":"Logging in the Frontend API layer","description":"Logging frontend errors when using Axios and TanStack Query.","date":"2024-03-06T00:00:00.000Z","tags":[],"readingTime":2.54,"hasTruncateMarker":true,"authors":[{"name":"Johnathan Sewell","url":"https://github.com/johnathan-sewell","imageURL":"https://avatars.githubusercontent.com/u/286782?v=4","key":"johnathan"}],"frontMatter":{"slug":"logging-frontend-api-layer","title":"Logging in the Frontend API layer","authors":"johnathan"},"unlisted":false,"prevItem":{"title":"React Flow for Elimination Brackets","permalink":"/react-flow"},"nextItem":{"title":"Using Intersection Observer to Create Scroll Shadows","permalink":"/using-intersection-observer-scroll-shadows"}},"content":"Logging frontend errors when using Axios and TanStack Query.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Handle Axios Errors Consistently in 1 Place with Interceptors\\n\\nTo log errors in the API layer, we can use Axios interceptors. Interceptors are functions that Axios calls for every request and response. We can use interceptors to log errors, and to handle errors in a consistent way.\\n\\n```ts\\nimport * as Sentry from \\"@sentry/browser\\";\\nimport { AxiosError } from \\"axios\\";\\n\\n/**\\n * Interceptor function that logs errors and captures exceptions using Sentry.\\n * @param error - The AxiosError object representing the error.\\n * @returns A rejected Promise with the error object.\\n */\\nexport const loggingInterceptor = (error: AxiosError) => {\\n  /* Log 4xx errors, as they are likely to be client issues that are actionable.\\n  4xx errors are expected in some cases. Use validateStatus to ignore on individual requests */\\n  if (\\n    error.response?.status &&\\n    error.response.status >= 400 &&\\n    error.response.status < 500\\n  ) {\\n    Sentry.captureException(error);\\n  }\\n\\n  /* Do not log network errors, as they are likely to be client issues that are not actionable. */\\n  /* Do not log 5xx errors, as they are likely to be server issues, and will be logged by the server. */\\n  return Promise.reject(error);\\n};\\n```\\n\\n![Use an interceptor for Axios error handling](axios.png)\\n\\n## Handle TanStack Query Errors Consistently in 1 Place\\n\\nWhen something goes wrong in a query, for example a Zod parsing error, it throws an error. We can use the `onError` option to handle these errors consistently in one place.\\n\\n```ts\\nimport * as Sentry from \\"@sentry/browser\\";\\nimport { QueryCache, QueryClient } from \\"@tanstack/react-query\\";\\n\\nconst queryClient = new QueryClient({\\n  queryCache: new QueryCache({\\n    onError: (error) => {\\n      // capture all ZodErrors with Sentry\\n      if (error instanceof z.ZodError) {\\n        console.error(error); // helpful for debugging zod errors\\n        Sentry.captureException(error);\\n      }\\n    },\\n  }),\\n});\\n```\\n\\n![TanStack Query and Axios and where to log errors](full.png)\\n\\nTanStack Query can be configured to throw errors that can be caught with a React Error Boundary. This may be a useful way to respond to data fetching errors in the UI layer.\\n\\n## What to log\\n\\nThere are several types of errors that can occur when making and processing data from HTTP requests. Some of these errors are actionable, and some are not. Here are some examples of errors that are actionable:\\n\\n- 4xx errors: These errors are likely to be client issues, and are actionable. For example, a 404 error indicates that the resource was not found.\\n\\n- 5xx errors: These errors are likely to be server issues, and are not actionable. For example, a 500 error indicates that the server encountered an unexpected condition.\\n\\n- Data parsing errors: These errors are likely to be client issues, and are actionable. For example, a Zod parsing error indicates that the data from the server does not match the expected schema.\\n\\n- Network errors: These errors are likely to be client issues, and are not actionable. For example, a network error indicates that the client is not connected to the internet.\\n\\n![types of errors and whether to log them](what-to-log.png)"},{"id":"using-intersection-observer-scroll-shadows","metadata":{"permalink":"/using-intersection-observer-scroll-shadows","source":"@site/blog/2024-02-09-using-intersection-observer-scroll-shadows/index.md","title":"Using Intersection Observer to Create Scroll Shadows","description":"Using the Intersection Observer API to create scroll shadows.","date":"2024-02-09T00:00:00.000Z","tags":[],"readingTime":2.045,"hasTruncateMarker":true,"authors":[{"name":"Johnathan Sewell","url":"https://github.com/johnathan-sewell","imageURL":"https://avatars.githubusercontent.com/u/286782?v=4","key":"johnathan"}],"frontMatter":{"slug":"using-intersection-observer-scroll-shadows","title":"Using Intersection Observer to Create Scroll Shadows","authors":"johnathan"},"unlisted":false,"prevItem":{"title":"Logging in the Frontend API layer","permalink":"/logging-frontend-api-layer"},"nextItem":{"title":"React Compound Component Pattern","permalink":"/compound-component"}},"content":"Using the Intersection Observer API to create scroll shadows.\\n\x3c!-- truncate --\x3e\\n\\n\\n#### Intersection Observer\\n\\nThe [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element.\\n\\n#### A Component with Scroll Shadows\\n\\nHere\'s a simple scrollable component.\\n\\n```ts\\nexport function Timeline() {\\n  return (\\n    <>\\n      <div className=\\"relative\\">\\n        <div className=\\"timeline-hidden-scrollbars relative flex gap-[6px] overflow-x-auto rounded-[3px] border border-solid border-timeline-border bg-timeline-background-100 p-1\\">\\n          {Array.from({ length: 15 }).map((_, index) => (\\n            <div\\n              key={index}\\n              className=\\"h-[30px] min-w-[30px] rounded-[2px] bg-yellow-300\\"\\n            ></div>\\n          ))}\\n        </div>\\n      </div>\\n    </>\\n  );\\n}\\n```\\n\\nLink to video: [Simple component without scroll shadows](1.webm)\\n\\nAnd with the Intersection Observer API we can create a shadow effect when the component is scrolled.\\n\\n```ts\\nimport { useScrollObservers } from \\"./hooks/useScrollObservers\\";\\n\\nconst ScrollShadowLeft = () => (\\n  <svg\\n    xmlns=\\"http://www.w3.org/2000/svg\\"\\n    width=\\"35\\"\\n    height=\\"36\\"\\n    viewBox=\\"0 0 35 36\\"\\n    className=\\"absolute left-px z-10 h-full min-w-[30px]\\"\\n  >\\n    <path d=\\"M0 36L35 36L35 0L0 0L0 36Z\\" fill=\\"url(#g0)\\" />\\n    <defs>\\n      <linearGradient\\n        id=\\"g0\\"\\n        x1=\\"0\\"\\n        y1=\\"13.9592\\"\\n        x2=\\"35\\"\\n        y2=\\"13.9592\\"\\n        gradientUnits=\\"userSpaceOnUse\\"\\n      >\\n        <stop offset=\\"0.109375\\" stopColor=\\"#1F0C19\\" />\\n        <stop offset=\\"0.494792\\" stopColor=\\"#1F0C19\\" stopOpacity=\\"0.9\\" />\\n        <stop offset=\\"1\\" stopColor=\\"#1F0C19\\" stopOpacity=\\"0\\" />\\n      </linearGradient>\\n    </defs>\\n  </svg>\\n);\\n\\nconst ScrollShadowRight = () => (\\n  <svg\\n    xmlns=\\"http://www.w3.org/2000/svg\\"\\n    width=\\"35\\"\\n    height=\\"36\\"\\n    viewBox=\\"0 0 35 36\\"\\n    className=\\"absolute right-px top-0 z-10 h-full min-w-[30px] rotate-180\\"\\n  >\\n    <path d=\\"M0 36L35 36L35 0L0 0L0 36Z\\" fill=\\"url(#g1)\\" />\\n    <defs>\\n      <linearGradient\\n        id=\\"g1\\"\\n        x1=\\"0\\"\\n        y1=\\"13.9592\\"\\n        x2=\\"35\\"\\n        y2=\\"13.9592\\"\\n        gradientUnits=\\"userSpaceOnUse\\"\\n      >\\n        <stop offset=\\"0.109375\\" stopColor=\\"#1F0C19\\" />\\n        <stop offset=\\"0.494792\\" stopColor=\\"#1F0C19\\" stopOpacity=\\"0.9\\" />\\n        <stop offset=\\"1\\" stopColor=\\"#1F0C19\\" stopOpacity=\\"0\\" />\\n      </linearGradient>\\n    </defs>\\n  </svg>\\n);\\n\\nexport function Timeline() {\\n  const {\\n    rootRef,\\n    leftScrollRef,\\n    rightScrollRef,\\n    isScrolledLeft,\\n    isScrolledRight,\\n  } = useScrollObservers();\\n\\n  return (\\n    // intersection parent\\n    <div className={\\"relative\\"} ref={rootRef}>\\n      {isScrolledLeft && <ScrollShadowLeft />}\\n\\n      <div className=\\"timeline-hidden-scrollbars relative flex gap-[6px] overflow-x-auto rounded-[3px] border border-solid border-timeline-border bg-timeline-background-100 p-1\\">\\n        {/* intersection element */}\\n        <div className=\\"-ml-1 h-[30px]\\" ref={leftScrollRef}></div>\\n\\n        {Array.from({ length: 15 }).map((_, index) => (\\n          <div\\n            key={index}\\n            className=\\"h-[30px] min-w-[30px] rounded-[2px] bg-yellow-300\\"\\n          ></div>\\n        ))}\\n\\n        {/* intersection element */}\\n        <div className=\\"-mr-1 h-[30px]\\" ref={rightScrollRef}></div>\\n      </div>\\n\\n      {isScrolledRight && <ScrollShadowRight />}\\n    </div>\\n  );\\n}\\n```\\n\\nAnd the useScrollObservers hook...\\n\\nI\'m using the [usehooks-ts](https://usehooks-ts.com/react-hook/use-intersection-observer) library for the useIntersectionObserver hook.\\n\\n```ts\\nimport { useRef } from \\"react\\";\\nimport { useIntersectionObserver } from \\"usehooks-ts\\";\\n\\nexport const useScrollObservers = () => {\\n  const leftScrollRef = useRef<HTMLDivElement>(null);\\n  const rightScrollRef = useRef<HTMLDivElement>(null);\\n  const rootRef = useRef<HTMLDivElement>(null);\\n\\n  const leftScrollEntry = useIntersectionObserver(leftScrollRef, {\\n    root: rootRef.current,\\n  });\\n  const rightScrollEntry = useIntersectionObserver(rightScrollRef, {\\n    root: rootRef.current,\\n  });\\n\\n  const isScrolledLeft =\\n    leftScrollEntry && leftScrollEntry.intersectionRatio < 1;\\n  const isScrolledRight =\\n    rightScrollEntry && rightScrollEntry.intersectionRatio < 1;\\n\\n  return {\\n    rootRef,\\n    leftScrollRef,\\n    rightScrollRef,\\n    isScrolledLeft,\\n    isScrolledRight,\\n  };\\n};\\n```\\n\\nLink to video: [Component with scroll shadows](2.webm)"},{"id":"compound-component","metadata":{"permalink":"/compound-component","source":"@site/blog/2024-02-06-compound-component-for-shared-layout/index.md","title":"React Compound Component Pattern","description":"The Compound Component pattern in React.","date":"2024-02-06T00:00:00.000Z","tags":[],"readingTime":1.15,"hasTruncateMarker":true,"authors":[{"name":"Johnathan Sewell","url":"https://github.com/johnathan-sewell","imageURL":"https://avatars.githubusercontent.com/u/286782?v=4","key":"johnathan"}],"frontMatter":{"slug":"compound-component","title":"React Compound Component Pattern","authors":"johnathan"},"unlisted":false,"prevItem":{"title":"Using Intersection Observer to Create Scroll Shadows","permalink":"/using-intersection-observer-scroll-shadows"},"nextItem":{"title":"Intersection Observer for Simple Transitions","permalink":"/intersection-observer-transitions"}},"content":"The Compound Component pattern in React.\\n\x3c!-- truncate --\x3e\\n\\n### React Compound Component Pattern\\n\\n#### The Compound Component Pattern\\n\\nIn React the Compound Component pattern is a way to create a component that exposes it\'s internal structure. This allows the external user to have greater control over the rendering of the child components.\\n\\nFor example a [Select component](https://www.smashingmagazine.com/2021/08/compound-components-react/) might expose it\'s options to the parent component, allowing the parent to control the layout and behaviour of the options.\\n\\n#### A Layout Component\\n\\nA reusable layout component can be created using the Compound Component pattern, the external user has more clarity over the layout and can control the rendering of the child components.\\n\\n```ts\\nexport function Layout2Columns({ children }: { children: React.ReactNode }) {\\n  return (\\n    <div className=\\"relative mx-auto mt-5 flex flex-col gap-5 md:flex-row\\">\\n      {children}\\n    </div>\\n  );\\n}\\n\\nfunction Content({ children }: { children: React.ReactNode }) {\\n  return <div className=\\"flex flex-col gap-12\\">{children}</div>;\\n}\\n\\nfunction SideBar({ children }: { children: React.ReactNode }) {\\n  return (\\n    <div className=\\"flex grow md:min-w-80\\">\\n      <div\\n        className=\\"no-scrollbar overflow-y-scroll md:fixed md:w-80\\"\\n        style={{ height: \\"calc(-100px + 100vh)\\" }}\\n      >\\n        {children}\\n      </div>\\n    </div>\\n  );\\n}\\n\\nLayout2Columns.Content = Content;\\nLayout2Columns.SideBar = SideBar;\\n```\\n\\nThe external user can use this component as below. Without this pattern changing behaviour might require passing extra props.\\n\\n```tsx\\n<Layout2Columns>\\n  <Layout2Columns.Content>\\n    <p>Content</p>\\n    <Footer className=\\"hidden bg-transparent md:block\\" />\\n  </Layout2Columns.Content>\\n\\n  <Layout2Columns.SideBar>\\n    <p>Sidebar</p>\\n  </Layout2Columns.SideBar>\\n  <Footer className=\\"block bg-transparent md:hidden\\" />\\n</Layout2Columns>\\n```"},{"id":"intersection-observer-transitions","metadata":{"permalink":"/intersection-observer-transitions","source":"@site/blog/2023-11-20-intersection-observer-transitions/index.md","title":"Intersection Observer for Simple Transitions","description":"Using the Intersection Observer API to trigger transitions.","date":"2023-11-20T00:00:00.000Z","tags":[],"readingTime":2.01,"hasTruncateMarker":true,"authors":[{"name":"Johnathan Sewell","url":"https://github.com/johnathan-sewell","imageURL":"https://avatars.githubusercontent.com/u/286782?v=4","key":"johnathan"}],"frontMatter":{"slug":"intersection-observer-transitions","title":"Intersection Observer for Simple Transitions","authors":"johnathan"},"unlisted":false,"prevItem":{"title":"React Compound Component Pattern","permalink":"/compound-component"},"nextItem":{"title":"Vite Project Setup","permalink":"/vite-project-setup"}},"content":"Using the Intersection Observer API to trigger transitions.\\n\\n\x3c!-- truncate --\x3e\\n### Intersection Observer for Simple Transition\\n\\nGiven a [\\"sticky\\"](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky) header which must transition from opaque to transparent when the user scrolls the page content up, we can use the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) to trigger the transition.\\n\\n![Sticky header fading as content is scrolled up](scroll-transition.gif)\\n\\n#### The Intersection Observer\\n\\nThe Intersection Observer is given a target element and triggers a callback when the target element is visible in the viewport. The primary use case is for lazy loading images and ads, as well as for infinite scrolling.\\n\\nIntersection observer is a performant alternative to listening for scroll events, because it offloads the work to the browser. The browser will optimize the work by batching the callbacks and throttling the events.\\n\\n#### Intersection Observer for Header Opacity\\n\\nIn our case, we create a hidden div overlay on the header (our intersection \\"target\\") and trigger the callback when that target div is being scrolled up and exiting the viewport.\\n\\nI\'m using `useIntersectionObserver` from [usehooks-ts](https://usehooks-ts.com/react-hook/use-intersection-observer) which simplifies using the Intersection Observer API in React.\\n\\nThe returned `entry` object from the hook contains the `intersectionRatio` which is a value between 0 and 1, where 0 is the target is not visible and 1 is the target is fully visible. We can use this value to set the opacity of the header.\\n\\n```ts\\nimport { useIntersectionObserver } from \\"usehooks-ts\\";\\nimport { useRef } from \\"react\\";\\n\\nexport const App = () => {\\n  const ref = useRef<HTMLDivElement>(null);\\n\\n  const entry = useIntersectionObserver(ref, {\\n    root: null,\\n    threshold: Array.from({ length: 100 }).map((_, i) => i / 100), // calls back at 1% intersections [0, 0.01, 0.02, ... 0.99, 1]\\n    rootMargin: \\"0px\\",\\n  });\\n\\n  return (\\n    <div>\\n      <header\\n        style={{\\n          opacity: entry?.intersectionRatio,\\n          backgroundColor: \\"#81a9ff\\",\\n          color: \\"#fff\\",\\n          height: \\"200px\\",\\n          position: \\"sticky\\",\\n          display: \\"flex\\",\\n          justifyContent: \\"center\\",\\n          alignItems: \\"center\\",\\n          top: 0,\\n          zIndex: -1,\\n        }}\\n      >\\n        Header\\n      </header>\\n\\n      <div\\n        ref={ref}\\n        style={{\\n          height: \\"200px\\",\\n          position: \\"absolute\\",\\n          top: 0,\\n          width: \\"100%\\",\\n          color: \\"#000\\",\\n          border: \\"2px solid #000\\",\\n        }}\\n      >\\n        Intersection Target (Hidden)\\n      </div>\\n\\n      {Array.from({ length: 10 }).map((_, idx) => (\\n        <p style={{ padding: \\"60px\\" }} key={idx}>\\n          Lorum ipsum dolor sit amet, consectetur adipiscing elit. Donec eu\\n          semper nunc. Sed euismod, nisl quis lacinia ultricies, nunc libero\\n          tincidunt nunc, quis aliquam nunc nisl quis nunc. Donec vitae nisl\\n          eget nunc ultricies aliquam.\\n        </p>\\n      ))}\\n    </div>\\n  );\\n};\\n```\\n\\n![Screenshot with hidden element](Screenshot1.png)\\n\\n![Screenshot 2 with hidden element](Screenshot2.png)\\n\\n[Run this on StackBlitz](https://stackblitz-starters-saun4d.stackblitz.io/)"},{"id":"vite-project-setup","metadata":{"permalink":"/vite-project-setup","source":"@site/blog/2023-08-25-new-vite-project-setup/index.md","title":"Vite Project Setup","description":"My preferred setup for a new Vite project.","date":"2023-08-25T00:00:00.000Z","tags":[],"readingTime":0.525,"hasTruncateMarker":true,"authors":[{"name":"Johnathan Sewell","url":"https://github.com/johnathan-sewell","imageURL":"https://avatars.githubusercontent.com/u/286782?v=4","key":"johnathan"}],"frontMatter":{"slug":"vite-project-setup","title":"Vite Project Setup","authors":"johnathan"},"unlisted":false,"prevItem":{"title":"Intersection Observer for Simple Transitions","permalink":"/intersection-observer-transitions"},"nextItem":{"title":"Simple Static Site Deployment to AWS with CDK","permalink":"/static-site-deployment-with-cdk"}},"content":"My preferred setup for a new Vite project.\\n\x3c!-- truncate --\x3e\\n\\n#### Create a new project and directory:\\n\\n```bash\\npnpm create vite my-project\\ncd my-project\\n```\\n\\n#### Set the correct Node version:\\n\\n```bash\\necho lts/* > .nvmrc && nvm use\\n```\\n\\nCheck that it runs locally:\\n\\n```bash\\ncd my-project\\npnpm install\\npnpm run dev\\n```\\n\\n#### Prettier\\n\\nAdd a .prettierrc file:\\n\\n```bash\\necho {} > .prettierrc\\n```\\n\\n```json\\n{\\n  \\"tabWidth\\": 2,\\n  \\"useTabs\\": false,\\n  \\"printWidth\\": 120\\n}\\n```\\n\\n#### PNPM\\n\\nOnly allow PNPM, in package.json:\\n\\n```json\\n{\\n  \\"scripts\\": {\\n    \\"preinstall\\": \\"npx only-allow pnpm\\"\\n  }\\n}\\n```\\n\\n#### Commitizen\\n\\n```bash\\ncommitizen init cz-conventional-changelog --pnpm --save-dev --save-exact\\n```"},{"id":"static-site-deployment-with-cdk","metadata":{"permalink":"/static-site-deployment-with-cdk","source":"@site/blog/2023-08-04-static-site-deployment-with-cdk/index.md","title":"Simple Static Site Deployment to AWS with CDK","description":"Deploy a static site to AWS with CDK.","date":"2023-08-04T00:00:00.000Z","tags":[],"readingTime":4.635,"hasTruncateMarker":true,"authors":[{"name":"Johnathan Sewell","url":"https://github.com/johnathan-sewell","imageURL":"https://avatars.githubusercontent.com/u/286782?v=4","key":"johnathan"}],"frontMatter":{"slug":"static-site-deployment-with-cdk","title":"Simple Static Site Deployment to AWS with CDK","authors":"johnathan"},"unlisted":false,"prevItem":{"title":"Vite Project Setup","permalink":"/vite-project-setup"},"nextItem":{"title":"Module Federation","permalink":"/module-federation"}},"content":"Deploy a static site to AWS with CDK.\\n\\n\x3c!-- truncate --\x3e\\n## What is CDK?\\n\\nCDK is a tool for deploying infrastructure to AWS. It allows you to write code that will be translated into CloudFormation templates and used to deploy your infrastructure.\\n\\n## What will we be deploying?\\n\\nA static React application, deployed to S3 and served via CloudFront.\\n\\n## Install the CDK CLI:\\n\\n```bash\\npnpm install -g aws-cdk\\n```\\n\\nIf successful then running `cdk --version` will return a version number.\\n\\n## Initialise CDK in your project\\n\\nUse the `cdk init` command, to create a CDK project. **This needs to be run in an empty directory.**\\n\\nCreate a subdirectory in your project to keep CDK code separate from application code.\\n\\n```bash\\nmkdir cdk && cd cdk\\ncdk init app --language typescript\\n```\\n\\n**lib/cdk-stack.ts** is where your CDK application\u2019s main stack is defined. This is the file we\u2019ll be spending most of our time in.\\n\\n**bin/cdk.ts** is the entrypoint of the CDK application. It will load the stack defined in lib/cdk-stack.ts.\\n\\n## Add your account details\\n\\nCreate a config file that can read environment variables set during deployment (a Github Workflow) or from a local .env file in cdk/config.ts.\\n\\nYou need to install `zod` and `dotenv`.\\n\\n`pnpm i zod`\\n\\n`pnpm i -D dotenv`\\n\\n<details>\\n<summary>Expand Code</summary>\\n\\n```typescript\\nimport { z } from \\"zod\\";\\nrequire(\\"dotenv\\").config({ path: `.env.local`, override: true });\\n\\nconst envVarsSchema = z.object({\\n  AWS_ACCOUNT: z.string().default(\\"YOUR ACCOUNT ID\\"),\\n  AWS_REGION: z.string().default(\\"eu-central-1\\"),\\n  ENVIRONMENT: z.enum([\\"local\\", \\"development\\", \\"production\\"]),\\n});\\n\\nexport type ApiEnvironment = z.input<typeof envVarsSchema>;\\n\\nconst envVars = envVarsSchema.safeParse(process.env);\\nif (!envVars.success) {\\n  // eslint-disable-next-line no-console\\n  console.error(\\"There is an error with your environment variables.\\");\\n  throw envVars.error;\\n}\\n\\nexport const config = {\\n  environment: envVars.data.ENVIRONMENT,\\n  project: {\\n    context: \\"website\\" as const,\\n    name: \\"frontend\\" as const,\\n  },\\n  shortEnvironment:\\n    envVars.data.ENVIRONMENT === \\"production\\"\\n      ? (\\"prod\\" as const)\\n      : (\\"dev\\" as const),\\n  aws: {\\n    account: envVars.data.AWS_ACCOUNT,\\n    region: envVars.data.AWS_REGION,\\n  },\\n};\\n```\\n\\n</details>\\n\\nUpdate bin/cdk.ts with your account details.\\n\\n<details>\\n<summary>Expand Code</summary>\\n\\n```typescript\\n#!/usr/bin/env node\\nimport \\"source-map-support/register\\";\\nimport * as cdk from \\"aws-cdk-lib\\";\\nimport { CdkStack } from \\"../lib/cdk-stack\\";\\nimport { config } from \\"../config\\";\\n\\nconst app = new cdk.App();\\nconst projectName = `${config.project.context}-${config.project.name}`;\\nconst stackName = `${projectName}-${config.shortEnvironment}`;\\n\\nnew CdkStack(app, stackName, {\\n  stackName,\\n  tags: {\\n    context: config.project.context,\\n    service: config.project.name,\\n    environment: config.environment,\\n  },\\n  env: {\\n    account: config.aws.account,\\n    region: config.aws.region,\\n  },\\n});\\n```\\n\\n</details>\\n\\nAdd local environment variables in `cdk/.env.local`:\\n\\n```bash\\nENVIRONMENT=development\\n```\\n\\n`echo ENVIRONMENT=development > cdk/.env.local`\\n\\n## Add an S3 Bucket to the Stack\\n\\nIn `lib/cdk-stack.ts` add the following code:\\n\\n<details>\\n<summary>Expand Code</summary>\\n\\n```typescript\\nimport * as cdk from \\"aws-cdk-lib\\";\\nimport { Construct } from \\"constructs\\";\\nimport * as s3 from \\"aws-cdk-lib/aws-s3\\";\\nimport { config } from \\"../config\\";\\n\\nexport class CdkStack extends cdk.Stack {\\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\\n    super(scope, id, props);\\n\\n    const projectName = `${config.project.context}-${config.project.name}`;\\n\\n    new s3.Bucket(this, `${projectName}-${config.shortEnvironment}`, {\\n      bucketName: `${projectName}-${config.shortEnvironment}`,\\n    });\\n  }\\n}\\n```\\n\\n</details>\\n\\n## Synthesising the CDK app\\n\\nWhen CDK apps are executed, they produce (or \u201csynthesize\u201d) an AWS CloudFormation template for each stack defined in your application.\\n\\nTo synthesize a CDK app, use the `cdk synth` command to create a CloudFormation template in the `cdk.out` directory.\\n\\n```bash\\n( cd cdk && cdk synth )\\n```\\n\\n`cdk deploy` actually synthesises the app before deploying, so you don\'t need to run `synth` before deploying, but it can be useful .\\n\\n## Bootstrapping\\n\\nBootstrapping is the process of provisioning resources for CDK itself, including an Amazon S3 bucket for storing files and IAM roles that grant permissions needed to perform deployments.\\n\\n**This only needs to be done once for your account and region.**\\n\\n```bash\\n( cd cdk && cdk bootstrap )\\n```\\n\\n## Deploying\\n\\n```bash\\n( cd cdk && cdk deploy )\\n```\\n\\nAfter deployment, you should see the new Stack in the [AWS CloudFormation console](https://console.aws.amazon.com/cloudformation/home). And the new Bucket in the [AWS S3 console](https://s3.console.aws.amazon.com/s3/home).\\n\\nAdd these to package.json:\\n\\n```json\\n\\"scripts\\": {\\n  \\"cdk:synth\\": \\"( cd cdk && cdk synth )\\",\\n  \\"cdk:deploy\\": \\"( cd cdk && cdk deploy )\\",\\n}\\n```\\n\\n## Add a CloudFront Distribution\\n\\nWe need to add a CloudFront distribution to serve the files from the S3 bucket.\\n\\n```typescript\\nconst distribution = new cloudfront.Distribution(\\n  this,\\n  `${projectName}-${config.shortEnvironment}-distribution}`,\\n  {\\n    defaultBehavior: {\\n      origin: new cloudfrontOrigins.S3Origin(originBucket),\\n    },\\n    comment: `${projectName}-${config.shortEnvironment}`,\\n    defaultRootObject: \\"index.html\\",\\n  }\\n);\\n```\\n\\n## Deploy the built application files\\n\\nNow that we have a bucket to deploy to, we can deploy our application files.\\n\\nAssume we have application build output is in the `dist` directory in the root of the project. We copy the contents of this directory to the S3 bucket by adding an S3 Bucket Deployment to the stack:\\n\\n```typescript\\nnew s3Deployment.BucketDeployment(\\n  this,\\n  `${projectName}-${config.shortEnvironment}-s3-deployment`,\\n  {\\n    sources: [s3Deployment.Source.asset(\\"../dist\\")],\\n    destinationBucket: originBucket,\\n    distribution,\\n    distributionPaths: [\\"/*\\"], // invalidates the Cloudfront cache for all files\\n  }\\n);\\n```\\n\\nOnce deployed you should have a Cloudfront distribution serving your website files.\\n\\n![End Result](end-result.png)\\n\\nThe complete stack code:\\n\\n```typescript\\nimport * as cdk from \\"aws-cdk-lib\\";\\nimport { Construct } from \\"constructs\\";\\nimport * as cloudfront from \\"aws-cdk-lib/aws-cloudfront\\";\\nimport * as cloudfrontOrigins from \\"aws-cdk-lib/aws-cloudfront-origins\\";\\nimport * as s3Deployment from \\"aws-cdk-lib/aws-s3-deployment\\";\\nimport * as s3 from \\"aws-cdk-lib/aws-s3\\";\\nimport { config } from \\"../config\\";\\n\\nexport class CdkStack extends cdk.Stack {\\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\\n    super(scope, id, props);\\n\\n    const projectName = `${config.project.context}-${config.project.name}`;\\n\\n    const originBucket = new s3.Bucket(\\n      this,\\n      `${projectName}-${config.shortEnvironment}`,\\n      {\\n        bucketName: `${projectName}-${config.shortEnvironment}`,\\n      }\\n    );\\n\\n    const distribution = new cloudfront.Distribution(\\n      this,\\n      `${projectName}-${config.shortEnvironment}-distribution}`,\\n      {\\n        defaultBehavior: {\\n          origin: new cloudfrontOrigins.S3Origin(originBucket),\\n        },\\n        comment: `${projectName}-${config.shortEnvironment}`,\\n        defaultRootObject: \\"index.html\\",\\n      }\\n    );\\n\\n    new s3Deployment.BucketDeployment(\\n      this,\\n      `${projectName}-${config.shortEnvironment}-s3-deployment`,\\n      {\\n        sources: [s3Deployment.Source.asset(\\"../dist\\")],\\n        destinationBucket: originBucket,\\n        distribution,\\n        distributionPaths: [\\"/*\\"], // invalidates the Cloudfront cache for all files\\n      }\\n    );\\n  }\\n}\\n```\\n\\n## To clean up and remove the stacks\\n\\nUse `destroy`\\n\\n```\\ncdk destroy\\n```"},{"id":"module-federation","metadata":{"permalink":"/module-federation","source":"@site/blog/2023-08-02-module-federation/index.md","title":"Module Federation","description":"Sharing code between applications with Module Federation.","date":"2023-08-02T00:00:00.000Z","tags":[],"readingTime":3.035,"hasTruncateMarker":true,"authors":[{"name":"Johnathan Sewell","url":"https://github.com/johnathan-sewell","imageURL":"https://avatars.githubusercontent.com/u/286782?v=4","key":"johnathan"}],"frontMatter":{"slug":"module-federation","title":"Module Federation","authors":"johnathan"},"unlisted":false,"prevItem":{"title":"Simple Static Site Deployment to AWS with CDK","permalink":"/static-site-deployment-with-cdk"},"nextItem":{"title":"Building a Quality Selector for HLS.js in React","permalink":"/hls-quality-selector"}},"content":"Sharing code between applications with Module Federation.\\n\\n\x3c!-- truncate --\x3e\\n\\n## What is Module Federation?\\n\\nModule Federation is a way to share code between applications. It is a feature of Webpack 5 and is also available as a plugin for Vite.\\n\\n## Why use Module Federation?\\n\\nModule Federation allows you to share code between applications. This can be useful if you have a component library that you want to share between applications. It can also be useful if you want to share a single component between applications.\\n\\nThis has benefits over an npm module, including the ability to share state between applications and the ability to share code without publishing to npm.\\n\\n## Create a Project for the Remote Module\\n\\nI\'m using a video player as an example here.\\n\\n#### Create a Vite project\\n\\nFollow these steps to [setup a new Vite project](../2023-08-25-new-vite-project-setup/index.md)\\n\\n#### Install the Vite module federation plugin\\n\\n```bash\\npnpm add @originjs/vite-plugin-federation -D\\n```\\n\\n#### Fix the port\\n\\nThis is so that we can point a host application here.\\n\\n```json\\n\\"scripts\\": {\\n    \\"dev\\": \\"vite --port 5001 --strictPort\\",\\n},\\n```\\n\\n#### Create a VideoPlayer component\\n\\n```jsx\\nimport { useState } from \\"react\\";\\n\\nfunction VideoPlayer({ src }) {\\n  const [count, setCount] = useState(0);\\n\\n  return (\\n    <>\\n      <h1>Video Player Module</h1>\\n      <div>\\n        <video width=\\"250\\" autoPlay muted>\\n          <source src={src} type=\\"video/webm\\" />\\n        </video>\\n      </div>\\n\\n      <button onClick={() => setCount((count) => count + 1)}>\\n        count is {count}\\n      </button>\\n    </>\\n  );\\n}\\n\\nexport default VideoPlayer;\\n```\\n\\n#### Configure the Vite module federation plugin\\n\\nAdd the configuration to the plugins array of `vite.config.js`:\\n\\n```js\\nimport { defineConfig } from \\"vite\\";\\nimport react from \\"@vitejs/plugin-react\\";\\nimport basicSsl from \\"@vitejs/plugin-basic-ssl\\";\\nimport federation from \\"@originjs/vite-plugin-federation\\";\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  server: {\\n    port: 3000,\\n    https: true,\\n  },\\n  plugins: [\\n    react(),\\n    /* install for local SSL*/\\n    /* pnpm add @vitejs/plugin-basic-ssl -D */\\n    basicSsl(),\\n    federation({\\n      name: \\"video_player_module\\",\\n      // file name for the manifest file, defaults to remoteEntry.js\\n      filename: \\"remoteEntry.js\\",\\n      exposes: {\\n        // expose each component you want to share\\n        // path to the component: name of the component\\n        \\"./VideoPlayer\\": \\"./src/VideoPlayer\\",\\n      },\\n      //  share react and react-dom from the host\\n      shared: [\\"react\\", \\"react-dom\\"],\\n    }),\\n  ],\\n  build: {\\n    outDir: \\"dist\\",\\n    modulePreload: false,\\n    target: \\"esnext\\",\\n    minify: false,\\n    cssCodeSplit: false,\\n  },\\n});\\n```\\n\\n#### Let\'s check that worked...\\n\\n```bash\\npnpm build && pnpm preview\\n```\\n\\nThen browse to \\"https://localhost:5001/assets/remoteEntry.js\\" and you should see a manifest file.\\n\\n![Manifest](manifest.png)\\n\\nIt\'s important to note you need to run `pnpm build` to generate the manifest file.\\n\\n## Configure the Host Application\\n\\n#### Install the Vite module federation plugin\\n\\n```bash\\npnpm add @originjs/vite-plugin-federation -D\\n```\\n\\n#### Configure the plugin\\n\\nConfigure the plugin in `vite.config.js` by adding the plugin to the plugins array:\\n\\n```js\\nimport federation from \\"@originjs/vite-plugin-federation\\";\\n\\nexport default defineConfig({\\n  plugins: [\\n    react(),\\n    basicSsl() /* local SSL */,\\n    federation({\\n      name: \\"host\\",\\n      remotes: {\\n        videoPlayerModule: \\"https://localhost:5001/assets/remoteEntry.js\\",\\n      },\\n      shared: [\\"react\\", \\"react-dom\\"], //  share react and react-dom from the host\\n    }),\\n  ],\\n  // ... rest of your config\\n});\\n```\\n\\n#### Import the remote Component into the Host Application\\n\\n```jsx\\nimport { useState } from \\"react\\";\\n// eslint-disable-next-line import/no-unresolved\\nimport VideoPlayer from \\"videoPlayerModule/VideoPlayer\\"; // can use React.lazy here\\n\\nexport default function ModuleFederationPage() {\\n  const [count, setCount] = useState(0);\\n\\n  return (\\n    <>\\n      <h1>Module Federation Host</h1>\\n      <button onClick={() => setCount((count) => count + 1)}>\\n        count is {count}\\n      </button>\\n      <VideoPlayer src=\\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm\\" />\\n    </>\\n  );\\n}\\n```\\n\\n#### Add declaration file\\n\\nFor TypeScript, you need to add a declaration file to the host application (declarations.d.ts):\\n\\n```ts\\ndeclare module \\"videoPlayerModule/VideoPlayer\\" {\\n  const VideoPlayer: React.ComponentType<{ src: string }>;\\n  export default VideoPlayer;\\n}\\n```\\n\\n#### Run the Host Application\\n\\nRun the host application and see the remote component working in the host application.\\n\\n```bash\\npnpm start\\n```\\n\\n![End result](end-result.png)"},{"id":"hls-quality-selector","metadata":{"permalink":"/hls-quality-selector","source":"@site/blog/2023-08-01-hls-quality-selector/index.md","title":"Building a Quality Selector for HLS.js in React","description":"Building an HLS.js video player quality selector in React.","date":"2023-08-01T00:00:00.000Z","tags":[],"readingTime":2.275,"hasTruncateMarker":true,"authors":[{"name":"Johnathan Sewell","url":"https://github.com/johnathan-sewell","imageURL":"https://avatars.githubusercontent.com/u/286782?v=4","key":"johnathan"}],"frontMatter":{"slug":"hls-quality-selector","title":"Building a Quality Selector for HLS.js in React","authors":"johnathan"},"unlisted":false,"prevItem":{"title":"Module Federation","permalink":"/module-federation"}},"content":"Building an HLS.js video player quality selector in React.\\n\\n\x3c!-- truncate --\x3e\\n\\n### A React hook to get and set the quality of an HLS.js video\\n\\nTo get and set the video quality we need to listen to the hls.js events and also set the `currentLevel` property on the hls instance.\\n\\n```jsx\\nimport Hls, { LevelSwitchedData, ManifestParsedData } from \\"hls.js\\";\\nimport { useEffect, useMemo, useState } from \\"react\\";\\n\\nexport const AUTO = -1;\\n\\nexport interface Level {\\n  height: number;\\n  index: number;\\n}\\n\\nexport const useHlsQualityLevels = ({ hls }: { hls: Hls | null }) => {\\n  const [levels, setLevels] = useState<Level[]>();\\n  const [currentLevelIndex, setCurrentLevelIndex] = useState<number>(AUTO);\\n  const [isAutoLevelEnabled, setIsAutoLevelEnabled] = useState<boolean>(true);\\n\\n  useEffect(() => {\\n    if (!hls) return;\\n\\n    function onLevelSwitched(eventName: string, data: LevelSwitchedData) {\\n      setCurrentLevelIndex(data.level);\\n    }\\n\\n    function onManifestParsed(eventName: string, data: ManifestParsedData) {\\n      const mappedLevels = data.levels.map((level, index) => ({\\n        height: level.height,\\n        index,\\n      }));\\n      const sortedLevels = mappedLevels.sort((a, b) => b.height - a.height);\\n      setLevels(sortedLevels);\\n    }\\n\\n    hls.on(Hls.Events.LEVEL_SWITCHED, onLevelSwitched);\\n    hls.on(Hls.Events.MANIFEST_PARSED, onManifestParsed);\\n\\n    return () => {\\n      hls.off(Hls.Events.LEVEL_SWITCHED, onLevelSwitched);\\n      hls.off(Hls.Events.MANIFEST_PARSED, onManifestParsed);\\n    };\\n  }, [hls]);\\n\\n  const handleQualityChange = useMemo(() => {\\n    return hls !== null\\n      ? (level: number) => {\\n          setIsAutoLevelEnabled(level === AUTO);\\n          hls.currentLevel = level;\\n        }\\n      : () => undefined;\\n  }, [hls]);\\n\\n  return {\\n    levels,\\n    isAutoLevelEnabled,\\n    currentLevelIndex,\\n    handleQualityChange,\\n  };\\n};\\n```\\n\\nAnd I use this to pass level information to a React component like this:\\n\\n```jsx\\nconst {\\n  levels = [],\\n  currentLevelIndex,\\n  isAutoLevelEnabled,\\n  handleQualityChange,\\n} = useHlsQualityLevels({ hls });\\n\\nreturn (\\n  <QualityLevelsButton\\n    levels={levels}\\n    currentLevelIndex={currentLevelIndex}\\n    isAutoLevelEnabled={isAutoLevelEnabled}\\n    onQualityChanged={handleQualityChange}\\n  />\\n);\\n```\\n\\n### Building the UI\\n\\nCreate a popup menu with a button that shows the current quality level and a list of quality levels to choose from. I\'m using [Headless UI](https://headlessui.com/react/popover) for this.\\n\\n```jsx\\n<Popover>\\n  <Popover.Button>\\n    {levels.find((level) => level.index === currentLevelIndex)?.height ??\\n      \\"Auto\\"}\\n  </Popover.Button>\\n  <Popover.Panel>\\n    {levels.map((level) => (\\n      <Popover.Button\\n        key={level.index}\\n        onClick={() => onQualityChanged(level.index)}\\n      >\\n        {level.height}\\n      </Popover.Button>\\n    ))}\\n    <Popover.Button onClick={() => onQualityChanged(-1)}>Auto</Popover.Button>\\n  </Popover.Panel>\\n</Popover>\\n```\\n\\nThis results in a functional but not pretty UI:\\n\\n![Headless UI](headlessui.png)\\n\\n#### Positioning the popup with Popper.js\\n\\n```jsx\\nconst [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>();\\nconst [popperElement, setPopperElement] = useState<HTMLDivElement | null>();\\nconst { styles, attributes } = usePopper(referenceElement, popperElement, {\\n  placement: \\"top\\",\\n  modifiers: [\\n    {\\n      name: \\"offset\\",\\n      options: {\\n        offset: [0, 10],\\n      },\\n    },\\n  ],\\n});\\n\\nreturn (\\n  <Popover className=\\"relative\\">\\n    <Popover.Button ref={setReferenceElement}>\\n      {levels.find((level) => level.index === currentLevelIndex)?.height ?? \\"Auto\\"}\\n    </Popover.Button>\\n    <Popover.Panel ref={setPopperElement} style={styles.popper} {...attributes.popper}>\\n      {levels.map((level) => (\\n        <Popover.Button key={level.index} onClick={() => onQualityChanged(level.index)}>\\n          {level.height}\\n        </Popover.Button>\\n      ))}\\n      <Popover.Button onClick={() => onQualityChanged(-1)}>Auto</Popover.Button>\\n    </Popover.Panel>\\n  </Popover>\\n);\\n```\\n\\nThe popup is now positioned correctly:\\n\\n![Popper JS](popper.png)\\n\\n#### Add some styling with Tailwind CSS\\n\\n![Styled Popup](styled.png)\\n\\n#### Finally add a transition\\n\\nUsing the [Transition element from Headless UI](https://headlessui.com/react/transition)\\n\\n```jsx\\nimport { Transition } from \\"@headlessui/react\\";\\n\\n<Transition\\n  as={Fragment}\\n  enter=\\"transition-opacity ease-out duration-500\\"\\n  enterFrom=\\"opacity-0\\"\\n  enterTo=\\"opacity-100\\"\\n  leave=\\"transition-opacity ease-in duration-200\\"\\n  leaveFrom=\\"opacity-100\\"\\n  leaveTo=\\"opacity-0\\"\\n>\\n  <Popover.Panel>/* ... */</Popover.Panel>\\n</Transition>;\\n```"}]}}')}}]);