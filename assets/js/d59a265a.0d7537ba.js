"use strict";(self.webpackChunkjohnathan_sewell=self.webpackChunkjohnathan_sewell||[]).push([[38],{8435:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var o=t(3274),i=t(4824);const s={slug:"static-site-deployment-with-cdk",title:"Simple Static Site Deployment to AWS with CDK",authors:"johnathan"},c=void 0,r={permalink:"/static-site-deployment-with-cdk",source:"@site/blog/2023-08-04-static-site-deployment-with-cdk/index.md",title:"Simple Static Site Deployment to AWS with CDK",description:"Deploy a static site to AWS with CDK.",date:"2023-08-04T00:00:00.000Z",formattedDate:"August 4, 2023",tags:[],readingTime:4.635,hasTruncateMarker:!0,authors:[{name:"Johnathan Sewell",url:"https://github.com/johnathan-sewell",imageURL:"https://avatars.githubusercontent.com/u/286782?v=4",key:"johnathan"}],frontMatter:{slug:"static-site-deployment-with-cdk",title:"Simple Static Site Deployment to AWS with CDK",authors:"johnathan"},unlisted:!1,prevItem:{title:"Vite Project Setup",permalink:"/vite-project-setup"},nextItem:{title:"Module Federation",permalink:"/module-federation"}},a={authorsImageUrls:[void 0]},d=[{value:"What is CDK?",id:"what-is-cdk",level:2},{value:"What will we be deploying?",id:"what-will-we-be-deploying",level:2},{value:"Install the CDK CLI:",id:"install-the-cdk-cli",level:2},{value:"Initialise CDK in your project",id:"initialise-cdk-in-your-project",level:2},{value:"Add your account details",id:"add-your-account-details",level:2},{value:"Add an S3 Bucket to the Stack",id:"add-an-s3-bucket-to-the-stack",level:2},{value:"Synthesising the CDK app",id:"synthesising-the-cdk-app",level:2},{value:"Bootstrapping",id:"bootstrapping",level:2},{value:"Deploying",id:"deploying",level:2},{value:"Add a CloudFront Distribution",id:"add-a-cloudfront-distribution",level:2},{value:"Deploy the built application files",id:"deploy-the-built-application-files",level:2},{value:"To clean up and remove the stacks",id:"to-clean-up-and-remove-the-stacks",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Deploy a static site to AWS with CDK."}),"\n",(0,o.jsx)(n.h2,{id:"what-is-cdk",children:"What is CDK?"}),"\n",(0,o.jsx)(n.p,{children:"CDK is a tool for deploying infrastructure to AWS. It allows you to write code that will be translated into CloudFormation templates and used to deploy your infrastructure."}),"\n",(0,o.jsx)(n.h2,{id:"what-will-we-be-deploying",children:"What will we be deploying?"}),"\n",(0,o.jsx)(n.p,{children:"A static React application, deployed to S3 and served via CloudFront."}),"\n",(0,o.jsx)(n.h2,{id:"install-the-cdk-cli",children:"Install the CDK CLI:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pnpm install -g aws-cdk\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If successful then running ",(0,o.jsx)(n.code,{children:"cdk --version"})," will return a version number."]}),"\n",(0,o.jsx)(n.h2,{id:"initialise-cdk-in-your-project",children:"Initialise CDK in your project"}),"\n",(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"cdk init"})," command, to create a CDK project. ",(0,o.jsx)(n.strong,{children:"This needs to be run in an empty directory."})]}),"\n",(0,o.jsx)(n.p,{children:"Create a subdirectory in your project to keep CDK code separate from application code."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mkdir cdk && cd cdk\ncdk init app --language typescript\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"lib/cdk-stack.ts"})," is where your CDK application\u2019s main stack is defined. This is the file we\u2019ll be spending most of our time in."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"bin/cdk.ts"})," is the entrypoint of the CDK application. It will load the stack defined in lib/cdk-stack.ts."]}),"\n",(0,o.jsx)(n.h2,{id:"add-your-account-details",children:"Add your account details"}),"\n",(0,o.jsx)(n.p,{children:"Create a config file that can read environment variables set during deployment (a Github Workflow) or from a local .env file in cdk/config.ts."}),"\n",(0,o.jsxs)(n.p,{children:["You need to install ",(0,o.jsx)(n.code,{children:"zod"})," and ",(0,o.jsx)(n.code,{children:"dotenv"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"pnpm i zod"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"pnpm i -D dotenv"})}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Expand Code"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { z } from "zod";\nrequire("dotenv").config({ path: `.env.local`, override: true });\n\nconst envVarsSchema = z.object({\n  AWS_ACCOUNT: z.string().default("YOUR ACCOUNT ID"),\n  AWS_REGION: z.string().default("eu-central-1"),\n  ENVIRONMENT: z.enum(["local", "development", "production"]),\n});\n\nexport type ApiEnvironment = z.input<typeof envVarsSchema>;\n\nconst envVars = envVarsSchema.safeParse(process.env);\nif (!envVars.success) {\n  // eslint-disable-next-line no-console\n  console.error("There is an error with your environment variables.");\n  throw envVars.error;\n}\n\nexport const config = {\n  environment: envVars.data.ENVIRONMENT,\n  project: {\n    context: "website" as const,\n    name: "frontend" as const,\n  },\n  shortEnvironment:\n    envVars.data.ENVIRONMENT === "production"\n      ? ("prod" as const)\n      : ("dev" as const),\n  aws: {\n    account: envVars.data.AWS_ACCOUNT,\n    region: envVars.data.AWS_REGION,\n  },\n};\n'})})]}),"\n",(0,o.jsx)(n.p,{children:"Update bin/cdk.ts with your account details."}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Expand Code"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'#!/usr/bin/env node\nimport "source-map-support/register";\nimport * as cdk from "aws-cdk-lib";\nimport { CdkStack } from "../lib/cdk-stack";\nimport { config } from "../config";\n\nconst app = new cdk.App();\nconst projectName = `${config.project.context}-${config.project.name}`;\nconst stackName = `${projectName}-${config.shortEnvironment}`;\n\nnew CdkStack(app, stackName, {\n  stackName,\n  tags: {\n    context: config.project.context,\n    service: config.project.name,\n    environment: config.environment,\n  },\n  env: {\n    account: config.aws.account,\n    region: config.aws.region,\n  },\n});\n'})})]}),"\n",(0,o.jsxs)(n.p,{children:["Add local environment variables in ",(0,o.jsx)(n.code,{children:"cdk/.env.local"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"ENVIRONMENT=development\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"echo ENVIRONMENT=development > cdk/.env.local"})}),"\n",(0,o.jsx)(n.h2,{id:"add-an-s3-bucket-to-the-stack",children:"Add an S3 Bucket to the Stack"}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"lib/cdk-stack.ts"})," add the following code:"]}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Expand Code"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import * as cdk from "aws-cdk-lib";\nimport { Construct } from "constructs";\nimport * as s3 from "aws-cdk-lib/aws-s3";\nimport { config } from "../config";\n\nexport class CdkStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const projectName = `${config.project.context}-${config.project.name}`;\n\n    new s3.Bucket(this, `${projectName}-${config.shortEnvironment}`, {\n      bucketName: `${projectName}-${config.shortEnvironment}`,\n    });\n  }\n}\n'})})]}),"\n",(0,o.jsx)(n.h2,{id:"synthesising-the-cdk-app",children:"Synthesising the CDK app"}),"\n",(0,o.jsx)(n.p,{children:"When CDK apps are executed, they produce (or \u201csynthesize\u201d) an AWS CloudFormation template for each stack defined in your application."}),"\n",(0,o.jsxs)(n.p,{children:["To synthesize a CDK app, use the ",(0,o.jsx)(n.code,{children:"cdk synth"})," command to create a CloudFormation template in the ",(0,o.jsx)(n.code,{children:"cdk.out"})," directory."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"( cd cdk && cdk synth )\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"cdk deploy"})," actually synthesises the app before deploying, so you don't need to run ",(0,o.jsx)(n.code,{children:"synth"})," before deploying, but it can be useful ."]}),"\n",(0,o.jsx)(n.h2,{id:"bootstrapping",children:"Bootstrapping"}),"\n",(0,o.jsx)(n.p,{children:"Bootstrapping is the process of provisioning resources for CDK itself, including an Amazon S3 bucket for storing files and IAM roles that grant permissions needed to perform deployments."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"This only needs to be done once for your account and region."})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"( cd cdk && cdk bootstrap )\n"})}),"\n",(0,o.jsx)(n.h2,{id:"deploying",children:"Deploying"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"( cd cdk && cdk deploy )\n"})}),"\n",(0,o.jsxs)(n.p,{children:["After deployment, you should see the new Stack in the ",(0,o.jsx)(n.a,{href:"https://console.aws.amazon.com/cloudformation/home",children:"AWS CloudFormation console"}),". And the new Bucket in the ",(0,o.jsx)(n.a,{href:"https://s3.console.aws.amazon.com/s3/home",children:"AWS S3 console"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Add these to package.json:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"scripts": {\n  "cdk:synth": "( cd cdk && cdk synth )",\n  "cdk:deploy": "( cd cdk && cdk deploy )",\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"add-a-cloudfront-distribution",children:"Add a CloudFront Distribution"}),"\n",(0,o.jsx)(n.p,{children:"We need to add a CloudFront distribution to serve the files from the S3 bucket."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'const distribution = new cloudfront.Distribution(\n  this,\n  `${projectName}-${config.shortEnvironment}-distribution}`,\n  {\n    defaultBehavior: {\n      origin: new cloudfrontOrigins.S3Origin(originBucket),\n    },\n    comment: `${projectName}-${config.shortEnvironment}`,\n    defaultRootObject: "index.html",\n  }\n);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"deploy-the-built-application-files",children:"Deploy the built application files"}),"\n",(0,o.jsx)(n.p,{children:"Now that we have a bucket to deploy to, we can deploy our application files."}),"\n",(0,o.jsxs)(n.p,{children:["Assume we have application build output is in the ",(0,o.jsx)(n.code,{children:"dist"})," directory in the root of the project. We copy the contents of this directory to the S3 bucket by adding an S3 Bucket Deployment to the stack:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'new s3Deployment.BucketDeployment(\n  this,\n  `${projectName}-${config.shortEnvironment}-s3-deployment`,\n  {\n    sources: [s3Deployment.Source.asset("../dist")],\n    destinationBucket: originBucket,\n    distribution,\n    distributionPaths: ["/*"], // invalidates the Cloudfront cache for all files\n  }\n);\n'})}),"\n",(0,o.jsx)(n.p,{children:"Once deployed you should have a Cloudfront distribution serving your website files."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"End Result",src:t(1073).A+"",width:"1360",height:"544"})}),"\n",(0,o.jsx)(n.p,{children:"The complete stack code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import * as cdk from "aws-cdk-lib";\nimport { Construct } from "constructs";\nimport * as cloudfront from "aws-cdk-lib/aws-cloudfront";\nimport * as cloudfrontOrigins from "aws-cdk-lib/aws-cloudfront-origins";\nimport * as s3Deployment from "aws-cdk-lib/aws-s3-deployment";\nimport * as s3 from "aws-cdk-lib/aws-s3";\nimport { config } from "../config";\n\nexport class CdkStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const projectName = `${config.project.context}-${config.project.name}`;\n\n    const originBucket = new s3.Bucket(\n      this,\n      `${projectName}-${config.shortEnvironment}`,\n      {\n        bucketName: `${projectName}-${config.shortEnvironment}`,\n      }\n    );\n\n    const distribution = new cloudfront.Distribution(\n      this,\n      `${projectName}-${config.shortEnvironment}-distribution}`,\n      {\n        defaultBehavior: {\n          origin: new cloudfrontOrigins.S3Origin(originBucket),\n        },\n        comment: `${projectName}-${config.shortEnvironment}`,\n        defaultRootObject: "index.html",\n      }\n    );\n\n    new s3Deployment.BucketDeployment(\n      this,\n      `${projectName}-${config.shortEnvironment}-s3-deployment`,\n      {\n        sources: [s3Deployment.Source.asset("../dist")],\n        destinationBucket: originBucket,\n        distribution,\n        distributionPaths: ["/*"], // invalidates the Cloudfront cache for all files\n      }\n    );\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"to-clean-up-and-remove-the-stacks",children:"To clean up and remove the stacks"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"destroy"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"cdk destroy\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1073:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/end-result-9c54c033d4ea430b527244eeec4ed2a8.png"},4824:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var o=t(9474);const i={},s=o.createContext(i);function c(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);